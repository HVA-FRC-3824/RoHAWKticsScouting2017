package frc3824.rohawkticsscouting2017.Statistics;

import org.apache.commons.math3.distribution.TDistribution;

import frc3824.rohawkticsscouting2017.Firebase.DataModels.Alliance;
import frc3824.rohawkticsscouting2017.Firebase.Database;

/**
 * @author Andrew Messing
 * Created: 8/19/16
 */
public class AllianceCalculations {

    private final static String TAG = "AllianceCalculations";
    private Database mDatabase;
    private Alliance mAlliance;
    private TeamCalculations[] mTeams;

    public AllianceCalculations(Alliance a)
    {
        mAlliance = a;
        mDatabase = Database.getInstance();
        mTeams = new TeamCalculations[3];
        for(int i = 0; i < mTeams.length; i++)
        {
            mTeams[i] = new TeamCalculations(mAlliance.teams[i]);
        }
    }

    /**
        Predicted Score

        pScore = ∑_(T in A) autoAbility(T)
    */
    public double predictedScore()
    {
        double pScore = 0.0;

        for(int i = 0; i < mAlliance.teams.length; i++)
        {
            pScore += mTeams[i].autoAbility();
        }

        return pScore;
    }

    /**
        Standard Deviation of Predicted Score

        std_pScore = sqrt(∑_(T in A) std_autoAbility(T)^2)
     */
    public double std_predictedScore()
    {
        double std_pScore = 0.0;

        for(int i = 0; i < mAlliance.teams.length; i++)
        {
            std_pScore += Math.pow(mTeams[i].std_autoAbility(), 2);
        }

        std_pScore = Math.sqrt(std_pScore);

        return std_pScore;
    }

    /**
        Win Probability

        In order to determine the win probability of alliance A facing alliance O, Welch's t-test
        (https://en.wikipedia.org/wiki/Welch%27s_t-test). This test is expressed using the formula

            t = (X_bar_1 + X_bar_2) / sqrt(s_1^2 / N_1 + s_2^2 / N_2)

            - X_bar_1 is the mean of the first sample
            - s_1 is the standard deviation of the first sample
            - N_1 is the size of the first sample

            - X_bar_2 is the mean of the second sample
            -s_2 is the standard deviation of the second sample
            -N_2 is the size of the second sample

       This t is then converted to a win probability using the cumulative distribution function
       (https://en.wikipedia.org/wiki/Cumulative_distribution_function) for a t-distribution T(t|v)

       In this case X_bar_1 is the predicted score for alliance A, s_1 is the standard deviation of
       the predicted score for alliance A, and N_1 is the average number of completed matches for
       each of the teams on alliance A.

            wC(A,O) = T(t|v)

       t is the t-value generated by the Welch's test and v is the degrees of freedom approximated
       by the Welch-Satterthwaite equation(https://en.wikipedia.org/wiki/WelchSatterthwaite_equation)

            v ≈ (s_1^2 / N_1 + s_2^2 / N_2)^2 / (s_1^4 / (N_1^2 * v_1) + s_2^4 / (N_2^2 * v_2))

       where v_1 = N_1 - 1 (the degrees of freedom for the first variance) and v_2 = N_2 -1
    */
    public double winProbabilityOver(Alliance O)
    {
        AllianceCalculations oCalc = new AllianceCalculations(O);

        double s_1 = std_predictedScore();
        double s_2 = oCalc.std_predictedScore();
        double N_1 = sampleSize();
        double N_2 = oCalc.sampleSize();

        double t = Statistics.welchsTest(predictedScore(), s_1, N_1, oCalc.predictedScore(), s_2, N_2);

        double v = Statistics.dof(s_1, N_1, s_2, N_2);

        TDistribution tDistribution = new TDistribution(v);
        return tDistribution.cumulativeProbability(t);
    }

    public double sampleSize()
    {
        double average = 0.0;
        for(int i = 0; i < mAlliance.teams.length; i++)
        {
            average += mTeams[i].numberOfCompletedMatches();
        }

        average /= mAlliance.teams.length;

        return average;
    }
}
